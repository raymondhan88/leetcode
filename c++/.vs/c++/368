class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
       sort(nums.begin(),nums.end());
       int n=nums.size();
       vector<int> dp(n,1);
       int maxval=nums[0];
       int maxl=1;
       for (int i=1;i<n;i++){
           for(int j=0;j<i;j++){
                if((nums[i]%nums[j])==0){
                    dp[i]=max(dp[i],dp[j]+1);
                }
           }
           if(dp[i]>maxl) {maxl=dp[i];
           maxval=nums[i];
           }
       }
      // return {maxl,maxval};
        vector<int> res;
        for(int i=n-1;i>=0&&maxl>0;i--){
             if((dp[i]==maxl)&&((maxval%nums[i])==0)){
                 res.push_back(nums[i]);
                 maxl--;
                 maxval=nums[i];
             }
        }
        return res;
    }
};